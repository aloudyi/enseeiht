/*
 * generated by Xtext 2.25.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.eNIGMA.Chemin;
import fr.n7.eNIGMA.Choix;
import fr.n7.eNIGMA.Condition;
import fr.n7.eNIGMA.Connaissance;
import fr.n7.eNIGMA.ENIGMAPackage;
import fr.n7.eNIGMA.Interaction;
import fr.n7.eNIGMA.Jeu;
import fr.n7.eNIGMA.Joueur;
import fr.n7.eNIGMA.Lieu;
import fr.n7.eNIGMA.Objet;
import fr.n7.eNIGMA.Personne;
import fr.n7.eNIGMA.Qualification;
import fr.n7.eNIGMA.Reponse;
import fr.n7.eNIGMA.Territoire;
import fr.n7.services.ENIGMAGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ENIGMASemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ENIGMAGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ENIGMAPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ENIGMAPackage.ACTION:
				sequence_Action(context, (fr.n7.eNIGMA.Action) semanticObject); 
				return; 
			case ENIGMAPackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case ENIGMAPackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case ENIGMAPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case ENIGMAPackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case ENIGMAPackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case ENIGMAPackage.JEU:
				sequence_Jeu(context, (Jeu) semanticObject); 
				return; 
			case ENIGMAPackage.JOUEUR:
				sequence_Joueur(context, (Joueur) semanticObject); 
				return; 
			case ENIGMAPackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case ENIGMAPackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case ENIGMAPackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case ENIGMAPackage.QUALIFICATION:
				sequence_Qualification(context, (Qualification) semanticObject); 
				return; 
			case ENIGMAPackage.REPONSE:
				sequence_Reponse(context, (Reponse) semanticObject); 
				return; 
			case ENIGMAPackage.TERRITOIRE:
				sequence_Territoire(context, (Territoire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JeuElement returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=ID objetsconsommables+=Objet* objetsattribuables+=Objet* connaissancesattribuables+=[Connaissance|ID]*)
	 */
	protected void sequence_Action(ISerializationContext context, fr.n7.eNIGMA.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Chemin
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (
	 *         etatc=EtatChemin 
	 *         conditionc=[Condition|ID] 
	 *         etato=EtatObligation 
	 *         conditiono=[Condition|ID] 
	 *         etatv=EtatVisibilite 
	 *         conditionv=[Condition|ID] 
	 *         precedent=[Lieu|ID] 
	 *         suivant=[Lieu|ID]
	 *     )
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__ETATC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__ETATC));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__CONDITIONC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__CONDITIONC));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__ETATO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__ETATO));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__CONDITIONO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__CONDITIONO));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__ETATV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__ETATV));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__CONDITIONV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__CONDITIONV));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__PRECEDENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__PRECEDENT));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__SUIVANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__SUIVANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheminAccess().getEtatcEtatCheminEnumRuleCall_1_0(), semanticObject.getEtatc());
		feeder.accept(grammarAccess.getCheminAccess().getConditioncConditionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.CHEMIN__CONDITIONC, false));
		feeder.accept(grammarAccess.getCheminAccess().getEtatoEtatObligationEnumRuleCall_3_0(), semanticObject.getEtato());
		feeder.accept(grammarAccess.getCheminAccess().getConditionoConditionIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.CHEMIN__CONDITIONO, false));
		feeder.accept(grammarAccess.getCheminAccess().getEtatvEtatVisibiliteEnumRuleCall_5_0(), semanticObject.getEtatv());
		feeder.accept(grammarAccess.getCheminAccess().getConditionvConditionIDTerminalRuleCall_6_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.CHEMIN__CONDITIONV, false));
		feeder.accept(grammarAccess.getCheminAccess().getPrecedentLieuIDTerminalRuleCall_8_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.CHEMIN__PRECEDENT, false));
		feeder.accept(grammarAccess.getCheminAccess().getSuivantLieuIDTerminalRuleCall_10_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.CHEMIN__SUIVANT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Choix
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     (name=ID reponses+=Reponse* conditions+=[Condition|ID]*)
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Condition
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (name=ID objetsRequis+=Objet* connaissancesRequises+=[Connaissance|ID]*)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Connaissance
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (name=ID qualification=Qualification etatv=EtatVisibilite etatp=EtatPossession)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__QUALIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__QUALIFICATION));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__ETATV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__ETATV));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__ETATP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CONNAISSANCE__ETATP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnaissanceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConnaissanceAccess().getQualificationQualificationParserRuleCall_2_0(), semanticObject.getQualification());
		feeder.accept(grammarAccess.getConnaissanceAccess().getEtatvEtatVisibiliteEnumRuleCall_4_0(), semanticObject.getEtatv());
		feeder.accept(grammarAccess.getConnaissanceAccess().getEtatpEtatPossessionEnumRuleCall_5_0(), semanticObject.getEtatp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Interaction
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=ID choix=Choix choixFin=Choix)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.INTERACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.INTERACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.INTERACTION__CHOIX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.INTERACTION__CHOIX));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.INTERACTION__CHOIX_FIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.INTERACTION__CHOIX_FIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteractionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInteractionAccess().getChoixChoixParserRuleCall_3_0(), semanticObject.getChoix());
		feeder.accept(grammarAccess.getInteractionAccess().getChoixFinChoixParserRuleCall_4_0(), semanticObject.getChoixFin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Jeu returns Jeu
	 *
	 * Constraint:
	 *     (name=ID jeuelement+=JeuElement*)
	 */
	protected void sequence_Jeu(ISerializationContext context, Jeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Joueur
	 *     Joueur returns Joueur
	 *
	 * Constraint:
	 *     (name=ID limite=INT objets+=Objet* connaissances+=Connaissance*)
	 */
	protected void sequence_Joueur(ISerializationContext context, Joueur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Lieu
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (name=ID personnes+=Personne*)
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Objet
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (name=ID occurrence=INT taille=INT etatv=EtatVisibilite etatp=EtatPossession)
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.OBJET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.OBJET__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.OBJET__OCCURRENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.OBJET__OCCURRENCE));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.OBJET__TAILLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.OBJET__TAILLE));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.OBJET__ETATV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.OBJET__ETATV));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.OBJET__ETATP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.OBJET__ETATP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjetAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjetAccess().getOccurrenceINTTerminalRuleCall_3_0(), semanticObject.getOccurrence());
		feeder.accept(grammarAccess.getObjetAccess().getTailleINTTerminalRuleCall_7_0(), semanticObject.getTaille());
		feeder.accept(grammarAccess.getObjetAccess().getEtatvEtatVisibiliteEnumRuleCall_9_0(), semanticObject.getEtatv());
		feeder.accept(grammarAccess.getObjetAccess().getEtatpEtatPossessionEnumRuleCall_10_0(), semanticObject.getEtatp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Personne
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         etato=EtatObligation 
	 *         conditiono=[Condition|ID] 
	 *         etatv=EtatVisibilite 
	 *         conditionv=[Condition|ID] 
	 *         texte=Qualification 
	 *         interaction=Interaction?
	 *     )
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Qualification returns Qualification
	 *
	 * Constraint:
	 *     qualification=STRING
	 */
	protected void sequence_Qualification(ISerializationContext context, Qualification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.QUALIFICATION__QUALIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.QUALIFICATION__QUALIFICATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualificationAccess().getQualificationSTRINGTerminalRuleCall_0(), semanticObject.getQualification());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Reponse
	 *     Reponse returns Reponse
	 *
	 * Constraint:
	 *     (name=ID texte=Qualification action=[Action|ID])
	 */
	protected void sequence_Reponse(ISerializationContext context, Reponse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.REPONSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.REPONSE__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.REPONSE__TEXTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.REPONSE__TEXTE));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.REPONSE__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.REPONSE__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReponseAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReponseAccess().getTexteQualificationParserRuleCall_5_0(), semanticObject.getTexte());
		feeder.accept(grammarAccess.getReponseAccess().getActionActionIDTerminalRuleCall_7_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.REPONSE__ACTION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Territoire
	 *     Territoire returns Territoire
	 *
	 * Constraint:
	 *     (name=ID lieuDebut=Lieu lieuxintermediaires+=Lieu* lieuxFin+=Lieu* chemins+=Chemin*)
	 */
	protected void sequence_Territoire(ISerializationContext context, Territoire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
