/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.eNIGMA.Chemin;
import fr.n7.eNIGMA.Choix;
import fr.n7.eNIGMA.ENIGMAPackage;
import fr.n7.eNIGMA.Interaction;
import fr.n7.eNIGMA.Jeu;
import fr.n7.eNIGMA.Joueur;
import fr.n7.eNIGMA.Lieu;
import fr.n7.eNIGMA.Objet;
import fr.n7.eNIGMA.Personne;
import fr.n7.eNIGMA.Qualification;
import fr.n7.eNIGMA.Reponse;
import fr.n7.eNIGMA.Territoire;
import fr.n7.services.ENIGMAGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ENIGMASemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ENIGMAGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ENIGMAPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ENIGMAPackage.ACTION:
				sequence_Action(context, (fr.n7.eNIGMA.Action) semanticObject); 
				return; 
			case ENIGMAPackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case ENIGMAPackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case ENIGMAPackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case ENIGMAPackage.JEU:
				sequence_Jeu(context, (Jeu) semanticObject); 
				return; 
			case ENIGMAPackage.JOUEUR:
				sequence_Joueur(context, (Joueur) semanticObject); 
				return; 
			case ENIGMAPackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case ENIGMAPackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case ENIGMAPackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case ENIGMAPackage.QUALIFICATION:
				sequence_Qualification(context, (Qualification) semanticObject); 
				return; 
			case ENIGMAPackage.REPONSE:
				sequence_Reponse(context, (Reponse) semanticObject); 
				return; 
			case ENIGMAPackage.TERRITOIRE:
				sequence_Territoire(context, (Territoire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     texte=STRING
	 */
	protected void sequence_Action(ISerializationContext context, fr.n7.eNIGMA.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.ACTION__TEXTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.ACTION__TEXTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getTexteSTRINGTerminalRuleCall_1_0(), semanticObject.getTexte());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (precedent=[Lieu|ID] suivant=[Lieu|ID])
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__PRECEDENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__PRECEDENT));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.CHEMIN__SUIVANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.CHEMIN__SUIVANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheminAccess().getPrecedentLieuIDTerminalRuleCall_2_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.CHEMIN__PRECEDENT, false));
		feeder.accept(grammarAccess.getCheminAccess().getSuivantLieuIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ENIGMAPackage.Literals.CHEMIN__SUIVANT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     reponses+=Reponse*
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=ID choix+=Choix*)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Jeu returns Jeu
	 *
	 * Constraint:
	 *     (name=ID territoire=Territoire joueur=Joueur)
	 */
	protected void sequence_Jeu(ISerializationContext context, Jeu semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.JEU__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.JEU__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.JEU__TERRITOIRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.JEU__TERRITOIRE));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.JEU__JOUEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.JEU__JOUEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJeuAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJeuAccess().getTerritoireTerritoireParserRuleCall_3_0(), semanticObject.getTerritoire());
		feeder.accept(grammarAccess.getJeuAccess().getJoueurJoueurParserRuleCall_4_0(), semanticObject.getJoueur());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Joueur returns Joueur
	 *
	 * Constraint:
	 *     (name=ID objet+=Objet*)
	 */
	protected void sequence_Joueur(ISerializationContext context, Joueur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (name=ID personne=Personne)
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.LIEU__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.LIEU__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.LIEU__PERSONNE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.LIEU__PERSONNE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLieuAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLieuAccess().getPersonnePersonneParserRuleCall_3_0(), semanticObject.getPersonne());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (name=ID taille=INT)
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.OBJET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.OBJET__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.OBJET__TAILLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.OBJET__TAILLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjetAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjetAccess().getTailleINTTerminalRuleCall_4_0(), semanticObject.getTaille());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (name=ID texte=Qualification interaction=Interaction?)
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Qualification returns Qualification
	 *
	 * Constraint:
	 *     qualification=STRING
	 */
	protected void sequence_Qualification(ISerializationContext context, Qualification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.QUALIFICATION__QUALIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.QUALIFICATION__QUALIFICATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualificationAccess().getQualificationSTRINGTerminalRuleCall_0(), semanticObject.getQualification());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reponse returns Reponse
	 *
	 * Constraint:
	 *     (texte=Qualification action=Action)
	 */
	protected void sequence_Reponse(ISerializationContext context, Reponse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.REPONSE__TEXTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.REPONSE__TEXTE));
			if (transientValues.isValueTransient(semanticObject, ENIGMAPackage.Literals.REPONSE__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMAPackage.Literals.REPONSE__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReponseAccess().getTexteQualificationParserRuleCall_2_0(), semanticObject.getTexte());
		feeder.accept(grammarAccess.getReponseAccess().getActionActionParserRuleCall_4_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Territoire returns Territoire
	 *
	 * Constraint:
	 *     (name=ID lieuDebut=Lieu lieuxFin+=Lieu* chemins+=Chemin*)
	 */
	protected void sequence_Territoire(ISerializationContext context, Territoire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
