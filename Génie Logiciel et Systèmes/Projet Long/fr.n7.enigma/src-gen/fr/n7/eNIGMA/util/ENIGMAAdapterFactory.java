/**
 * generated by Xtext 2.25.0
 */
package fr.n7.eNIGMA.util;

import fr.n7.eNIGMA.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.n7.eNIGMA.ENIGMAPackage
 * @generated
 */
public class ENIGMAAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ENIGMAPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ENIGMAAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ENIGMAPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ENIGMASwitch<Adapter> modelSwitch =
    new ENIGMASwitch<Adapter>()
    {
      @Override
      public Adapter caseJeu(Jeu object)
      {
        return createJeuAdapter();
      }
      @Override
      public Adapter caseJeuElement(JeuElement object)
      {
        return createJeuElementAdapter();
      }
      @Override
      public Adapter caseJoueur(Joueur object)
      {
        return createJoueurAdapter();
      }
      @Override
      public Adapter caseConnaissance(Connaissance object)
      {
        return createConnaissanceAdapter();
      }
      @Override
      public Adapter caseObjet(Objet object)
      {
        return createObjetAdapter();
      }
      @Override
      public Adapter caseTerritoire(Territoire object)
      {
        return createTerritoireAdapter();
      }
      @Override
      public Adapter caseChoix(Choix object)
      {
        return createChoixAdapter();
      }
      @Override
      public Adapter caseInteraction(Interaction object)
      {
        return createInteractionAdapter();
      }
      @Override
      public Adapter casePersonne(Personne object)
      {
        return createPersonneAdapter();
      }
      @Override
      public Adapter caseLieu(Lieu object)
      {
        return createLieuAdapter();
      }
      @Override
      public Adapter caseChemin(Chemin object)
      {
        return createCheminAdapter();
      }
      @Override
      public Adapter caseQualification(Qualification object)
      {
        return createQualificationAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseReponse(Reponse object)
      {
        return createReponseAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Jeu <em>Jeu</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Jeu
   * @generated
   */
  public Adapter createJeuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.JeuElement <em>Jeu Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.JeuElement
   * @generated
   */
  public Adapter createJeuElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Joueur <em>Joueur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Joueur
   * @generated
   */
  public Adapter createJoueurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Connaissance <em>Connaissance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Connaissance
   * @generated
   */
  public Adapter createConnaissanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Objet <em>Objet</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Objet
   * @generated
   */
  public Adapter createObjetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Territoire <em>Territoire</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Territoire
   * @generated
   */
  public Adapter createTerritoireAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Choix <em>Choix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Choix
   * @generated
   */
  public Adapter createChoixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Interaction <em>Interaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Interaction
   * @generated
   */
  public Adapter createInteractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Personne <em>Personne</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Personne
   * @generated
   */
  public Adapter createPersonneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Lieu <em>Lieu</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Lieu
   * @generated
   */
  public Adapter createLieuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Chemin <em>Chemin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Chemin
   * @generated
   */
  public Adapter createCheminAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Qualification <em>Qualification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Qualification
   * @generated
   */
  public Adapter createQualificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Reponse <em>Reponse</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Reponse
   * @generated
   */
  public Adapter createReponseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.eNIGMA.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.eNIGMA.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ENIGMAAdapterFactory
