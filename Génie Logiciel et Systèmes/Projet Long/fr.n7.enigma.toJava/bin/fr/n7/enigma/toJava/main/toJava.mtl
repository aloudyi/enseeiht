[comment encoding = UTF-8 /]
[module toJava('http://www.n7.fr/ENIGMA')]

[template public jeuToJAVA(aJeu : Jeu)]
[comment @main/]
[file (aJeu.name + '.java', false, 'UTF-8')]

import java.util.*;
public class [aJeu.name/] {

	// SCANNER DES REPONSES DE L UTILISATEUR
	public static final Scanner in = new Scanner(System.in);
	
	// TERRITOIRE
	public Territoire territoire;
	
	public Territoire getTerritoire() {
		return this.territoire;
	}
	
	// JOUEUR
	public Joueur joueur;
	
	public Joueur getJoueur() {
		return this.joueur;
	}
	
	public static void Initialiser_Territoire([aJeu.name/] enigme) {
		List<Personne> personnes_[aJeu.getTerritoire().lieuDebut.name/] = new ArrayList<Personne>();
		[for (p : Personne | aJeu.getTerritoire().lieuDebut.personnes)]
			List<Choix> choix_[p.name/] = new ArrayList<Choix>();

			[for (ch : Choix | p.interaction.choix)]
				Choix choix_[p.interaction.name/] = enigme.new Choix(null, null);
				List<Reponse> reponses_[p.interaction.name/] = new ArrayList<Reponse>();
				
				[for(r : Reponse | ch.reponses)]
					List<Objet> objets_c_[r.name/] = new ArrayList<Objet>();
					[for(o : Objet | r.action.objetsconsommables)]
						objets_c_[r.name/].add(enigme.new Objet("[o.name/]", [o.occurrence/], [o.taille/], EtatVisibilite.visible));
					[/for]
					List<Objet> objets_a_[r.name/] = new ArrayList<Objet>();
					[for(o : Objet | r.action.objetsattribuables)]
						objets_a_[r.name/].add(enigme.new Objet("[o.name/]", [o.occurrence/], [o.taille/], EtatVisibilite.visible));
					[/for]
					List<Objet> connaissances_a_[r.name/] = new ArrayList<Connaissance>();
					[for(c : Connaissance | r.action.connaissancesattribuables)]
						connaissances_a_[r.name/].add(enigme.new Connaissance("[c.name/]", EtatVisibilite.visible, EtatObligation.obligatoire));
					[/for]
					Action action_[r.name/] =  enigme.new Action("[r.action.texte/]", objets_c_[r.name/], objets_a_[r.name/], connaissances_a_[r.name/]);
					Reponse reponse_[r.name/] = enigme.new Reponse("[r.name/]", enigme.new Qualification("[r.texte.qualification/]"), action_[r.name/]);
					reponses_[p.interaction.name/].add(reponse_[r.name/]);			
				[/for]
				
				// CHOIX DE L INTERACTION
				choix_[p.interaction.name/].setName("[p.interaction.name/]");
				choix_[p.interaction.name/].setReponses(reponses_[p.interaction.name/]);
				choix_[p.name/].add(choix_[p.interaction.name/]);

			[/for]			

			// INTERACTION DE LA PERSONNE
			Interaction interaction_[p.name/] = enigme.new Interaction("[p.interaction.name/]", choix_[p.name/]);
			// QUALIFICATION DE LA PERSONNE
			Qualification texte_[p.name/] = enigme.new Qualification("[p.texte.qualification/]");
			// PERSONNE DU LIEU DE DEBUT
			Personne personne_[p.name/] = enigme.new Personne("[p.name/]", EtatObligation.obligatoire, EtatVisibilite.visible, texte_Sphinx, interaction_[p.name/]);	
			personnes_[aJeu.getTerritoire().lieuDebut.name/].add(personne_Sphinx);

		[/for]
		// CONSTRUCTEUR DU LIEU DE DEBUT
		Lieu [aJeu.getTerritoire().lieuDebut.name/] = enigme.new Lieu("[aJeu.getTerritoire().lieuDebut.name/]", personnes_[aJeu.getTerritoire().lieuDebut.name/]);
		
		// LIEUXINTERMEDIAIRES
		List<Lieu> lieuxintermediaires = new ArrayList<Lieu>();
		[for( l : Lieu | aJeu.getTerritoire().lieuxintermediaires)]
			List<Personne> personnes_[l.name/] = new ArrayList<Personne>();
			[for (p : Personne | l.personnes)]
				List<Choix> choix_[p.name/] = new ArrayList<Choix>();
	
				[for (ch : Choix | p.interaction.choix)]
					Choix choix_[p.interaction.name/] = enigme.new Choix(null, null);
					List<Reponse> reponses_[p.interaction.name/] = new ArrayList<Reponse>();
					
					[for(r : Reponse | ch.reponses)]
						List<Objet> objets_c_[r.name/] = new ArrayList<Objet>();
						[for(o : Objet | r.action.objetsconsommables)]
							objets_c_[r.name/].add(enigme.new Objet("[o.name/]", [o.occurrence/], [o.taille/], EtatVisibilite.visible));
						[/for]
						List<Objet> objets_a_[r.name/] = new ArrayList<Objet>();
						[for(o : Objet | r.action.objetsattribuables)]
							objets_a_[r.name/].add(enigme.new Objet("[o.name/]", [o.occurrence/], [o.taille/], EtatVisibilite.visible));
						[/for]
						List<Objet> connaissances_a_[r.name/] = new ArrayList<Connaissance>();
						[for(c : Connaissance | r.action.connaissancesattribuables)]
							connaissances_a_[r.name/].add(enigme.new Connaissance("[c.name/]", EtatVisibilite.visible, EtatObligation.obligatoire));
						[/for]
						Action action_[r.name/] =  enigme.new Action("[r.action.texte/]", objets_c_[r.name/], objets_a_[r.name/], connaissances_a_[r.name/]);
						Reponse reponse_[r.name/] = enigme.new Reponse("[r.name/]", enigme.new Qualification("[r.texte.qualification/]"), action_[r.name/]);
						reponses_[p.interaction.name/].add(reponse_[r.name/]);			
					[/for]
					
					// CHOIX DE L INTERACTION
					choix_[p.interaction.name/].setName("[p.interaction.name/]");
					choix_[p.interaction.name/].setReponses(reponses_[p.interaction.name/]);
					choix_[p.name/].add(choix_[p.interaction.name/]);
	
				[/for]			
	
				// INTERACTION DE LA PERSONNE
				Interaction interaction_[p.name/] = enigme.new Interaction("[p.interaction.name/]", choix_[p.name/]);
				// QUALIFICATION DE LA PERSONNE
				Qualification texte_[p.name/] = enigme.new Qualification("[p.texte.qualification/]");
				// PERSONNE DU LIEU DE DEBUT
				Personne personne_[p.name/] = enigme.new Personne("[p.name/]", EtatObligation.obligatoire, EtatVisibilite.visible, texte_Sphinx, interaction_[p.name/]);	
				personnes_[l.name/].add(personne_Sphinx);
	
			[/for]
			Lieu [l.name/] = enigme.new Lieu("[l.name/]", personnes_[l.name/]);
			lieuxintermediaires.add([l.name/]);
		[/for]
			
		
		// LIEUXFIN
		List<Lieu> lieuxfin = new ArrayList<Lieu>();
		[for( l : Lieu | aJeu.getTerritoire().lieuxFin)]
			List<Personne> personnes_[l.name/] = new ArrayList<Personne>();
			[for (p : Personne | l.personnes)]
				List<Choix> choix_[p.name/] = new ArrayList<Choix>();
	
				[for (ch : Choix | p.interaction.choix)]
					Choix choix_[p.interaction.name/] = enigme.new Choix(null, null);
					List<Reponse> reponses_[p.interaction.name/] = new ArrayList<Reponse>();
					
					[for(r : Reponse | ch.reponses)]
						List<Objet> objets_c_[r.name/] = new ArrayList<Objet>();
						[for(o : Objet | r.action.objetsconsommables)]
							objets_c_[r.name/].add(enigme.new Objet("[o.name/]", [o.occurrence/], [o.taille/], EtatVisibilite.visible));
						[/for]
						List<Objet> objets_a_[r.name/] = new ArrayList<Objet>();
						[for(o : Objet | r.action.objetsattribuables)]
							objets_a_[r.name/].add(enigme.new Objet("[o.name/]", [o.occurrence/], [o.taille/], EtatVisibilite.visible));
						[/for]
						List<Objet> connaissances_a_[r.name/] = new ArrayList<Connaissance>();
						[for(c : Connaissance | r.action.connaissancesattribuables)]
							connaissances_a_[r.name/].add(enigme.new Connaissance("[c.name/]", EtatVisibilite.visible, EtatObligation.obligatoire));
						[/for]
						Action action_[r.name/] =  enigme.new Action("[r.action.texte/]", objets_c_[r.name/], objets_a_[r.name/], connaissances_a_[r.name/]);
						Reponse reponse_[r.name/] = enigme.new Reponse("[r.name/]", enigme.new Qualification("[r.texte.qualification/]"), action_[r.name/]);
						reponses_[p.interaction.name/].add(reponse_[r.name/]);			
					[/for]
					
					// CHOIX DE L INTERACTION
					choix_[p.interaction.name/].setName("[p.interaction.name/]");
					choix_[p.interaction.name/].setReponses(reponses_[p.interaction.name/]);
					choix_[p.name/].add(choix_[p.interaction.name/]);
	
				[/for]			
	
				// INTERACTION DE LA PERSONNE
				Interaction interaction_[p.name/] = enigme.new Interaction("[p.interaction.name/]", choix_[p.name/]);
				// QUALIFICATION DE LA PERSONNE
				Qualification texte_[p.name/] = enigme.new Qualification("[p.texte.qualification/]");
				// PERSONNE DU LIEU DE DEBUT
				Personne personne_[p.name/] = enigme.new Personne("[p.name/]", EtatObligation.obligatoire, EtatVisibilite.visible, texte_Sphinx, interaction_[p.name/]);	
				personnes_[l.name/].add(personne_Sphinx);
	
			[/for]
			Lieu [l.name/] = enigme.new Lieu("[l.name/]", personnes_[l.name/]);
			lieuxfin.add([l.name/]);
		[/for]
		
		// CHEMINS
		List<Chemin> chemins = new ArrayList<Chemin>();
		[for(c : Chemin | aJeu.getTerritoire().chemins)]
			Chemin chemin_[c.precedent/]_[c.suivant/] = enigme.new Chemin(EtatChemin.ouvert, EtatObligation.obligatoire, EtatVisibilite.visible, [c.precedent/], [c.suivant/]);
			chemins.add(chemin_Depart_Fin);
		[/for]
	
		// AJOUT DE TOUT CECI AU TERRITOIRE
		enigme.territoire = enigme.new Territoire([aJeu.getTerritoire().name/], [aJeu.getTerritoire().lieuDebut.name/], lieuxintermediaires, lieuxfin, chemins);
	}
	
	private static void Initialiser_Joueur([aJeu.name/] enigme) {
		ArrayList<Objet> objets = new ArrayList<Objet>();
		[for(o : Objet | aJeu.getJoueur().objets)]
			objets.add(enigme.new Objet("[o.name/]", [o.occurrence/], [o.taille/], EtatVisibilite.visible));
		[/for]
		ArrayList<Connaissance> connaissances = new ArrayList<Connaissance>();
		[for(c : Connaissance | aJeu.getJoueur().connaissances)]
			connaissances.add(enigme.new Connaissance("[c.name/]", EtatVisibilite.visible, EtatObligation.obligatoire));
		[/for]
		enigme.joueur = enigme.new Joueur([aJeu.getJoueur().name/], 1, objets, connaissances);
	}

	public static void main(String['[]'/] args) throws InterruptedException {

		// PROGRAMME PRINCIPAL
		System.out.println("BONJOUR, BIENVENUE AU JEU Enigme");
		System.out.println("Pour d√©marrer le jeu, taper D");
		System.out.println("Pour quitter le jeu, taper Q");

		// LIRE L ENTREE DE L UTILISATEUR
		boolean b = true;
		while(b) {
			String rep = in.nextLine();
			if (rep.contentEquals("Q")) {
				System.out.println("MERCI, A BIENTOT !");
				System.exit(0);
			}
			else if (rep.contentEquals("D")) {
				Demarrer();
				b = false;
			}
			else {
				System.out.println("Veuillez taper soit D soit Q");
			}
		}
	}

	public static void Demarrer() throws InterruptedException {
		System.out.println("Le jeu d√©marre dans 3 secondes");
		System.out.println("A vos marques");
		Thread.sleep(1000);
		System.out.println("Prets");
		Thread.sleep(1000);
		System.out.println("Partez !");
		Thread.sleep(1000);

		[aJeu.name/] enigme = new [aJeu.name/]();
		Initialiser_Territoire(enigme);
		Initialiser_Joueur(enigme);
		
		/**initialiser_Sphinx_reponses();	
		initialiser_Final_reponses();
		initialiser_chemins();
		initialiser_objets_joueur(); */

		System.out.println("Vous etes maintenant au lieu" + enigme.getTerritoire().lieuDebut.name);
		Interagir(enigme);
	}

	public static void Interagir(Enigme_avec_actions enigme) throws InterruptedException {
		// OBJET DU JOUEUR
		int nbtentative = enigme.getJoueur().getObjets().get(0).getOccurrence();
		// ON BOUCLE SUR LES PERSONNES DU TERRITOIRE
		for (int i = 0; i < enigme.getTerritoire().getLieuDebut().getPersonnes().size(); i++) {
			System.out.println("Bonjour, je suis la personne " + enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getName());
			System.out.println("Vous devez √† la question suivante : " + enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getTexte().getQualification());
			// LA CONDITION DE SORTIE DE LA BOUCLE EST QUE LES TENTATIVES SOIENT TOUTES CONSOMMES
			while(nbtentative != 0) {
				System.out.println("Choisissez entre les r√©ponses suivantes : ");
				for(Reponse r : enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getInteraction().getChoix().get(0).getReponses()) {
					System.out.println(r.getName());
				}
				String re = in.nextLine();
				String r = re;
				boolean b = true;
				while(b) {
					// AU CAS OU LE JOUEUR N AS PAS TAPE UNE DES REPONSES EXISTANTES
					if(!(enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getInteraction().getChoix().get(0).getNames().contains(r))) {
						System.out.println("Vous devez taper une des r√©ponses suivantes : ");
						for (Reponse rep : enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getInteraction().getChoix().get(0).getReponses()) {
	                		System.out.println(rep.getName());
	                	}
	            		r = in.nextLine();
					}
					else {
	        			b = false;
	        		}
				}
				int pos = enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getInteraction().getChoix().get(0).getNames().indexOf(r);
				String etat = enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getInteraction().getChoix().get(0).getReponses().get(pos).getTexte().getQualification();
	        	if (etat.contentEquals("bonne")) {
	        		System.out.println("F√©licitations, Bonne r√©ponse !");
	        		Thread.sleep(1000);
	        		System.exit(0);
	        	}
				else {
					// ON DIMINUE LE NOMBRE DE TENTATIVES DU JOUEUR SELON L ACTION CORRESPONDANTE 
					nbtentative = nbtentative - enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getInteraction().getChoix().get(0).getReponses().get(pos).getAction().getObjetsconsommables().get(0).getOccurrence();
					enigme.getTerritoire().getLieuDebut().getPersonnes().get(i).getInteraction().getChoix().get(0).getReponses().remove(pos);
	        		if (nbtentative == 0) {
	        			break;
	        		}
	        		System.out.println("Mauvaise r√©ponse, il ne vous reste que " + nbtentative + " " + enigme.getJoueur().getObjets().get(0).getName());
	        	}
			}
		}
		
		System.out.println("Mauvaise r√©ponse !");
    	Thread.sleep(1000);;
    	System.out.println("Malheureusement, vous avez perdu toutes vos tentatives");
    	System.exit(0);
	}
	
	public class Joueur {
		public String name;
		public int limite;
		public ArrayList<Objet> objets;
		public ArrayList<Connaissance> connaissances;
		public Joueur (String name, int limite, ArrayList<Objet> objets, ArrayList<Connaissance> connaissances) {
			this.connaissances = connaissances;
			this.limite = limite;
			this.name = name;
			this.objets = objets;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public int getLimite() {
			return limite;
		}
		public void setLimite(int limite) {
			this.limite = limite;
		}
		public ArrayList<Objet> getObjets() {
			return objets;
		}
		public void setObjets(ArrayList<Objet> objets) {
			this.objets = objets;
		}
		public ArrayList<Connaissance> getConnaissances() {
			return connaissances;
		}
		public void setConnaissances(ArrayList<Connaissance> connaissances) {
			this.connaissances = connaissances;
		}
	}
	
	public class Objet {
		public String name;
		public int occurrence;
		public int taille;
		public EtatVisibilite etatvi;
		public Objet(String name, int occurrence, int taille, EtatVisibilite etatvi) {
			this.etatvi = etatvi;
			this.name = name;
			this.occurrence = occurrence;
			this.taille = taille;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public int getOccurrence() {
			return occurrence;
		}
		public void setOccurrence(int occurrence) {
			this.occurrence = occurrence;
		}
		public int getTaille() {
			return taille;
		}
		public void setTaille(int taille) {
			this.taille = taille;
		}
		public EtatVisibilite getEtatvi() {
			return etatvi;
		}
		public void setEtatvi(EtatVisibilite etatvi) {
			this.etatvi = etatvi;
		}
	}
	
	public class Connaissance {
		public String name;
		public EtatVisibilite etatvi;
		public EtatObligation etatob;
		public Connaissance(String name, EtatVisibilite etatvi, EtatObligation etatob) {
			this.etatob = etatob;
			this.etatvi = etatvi;
			this.name = name;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public EtatVisibilite getEtatvi() {
			return etatvi;
		}
		public void setEtatvi(EtatVisibilite etatvi) {
			this.etatvi = etatvi;
		}
		public EtatObligation getEtatob() {
			return etatob;
		}
		public void setEtatob(EtatObligation etatob) {
			this.etatob = etatob;
		}
	}
	
	public class Territoire {
		public String name;
		public Lieu lieuDebut;
		public List<Lieu> lieuxintermediaires;
		public List<Lieu> lieuxFin;
		public List<Chemin> chemins;
		public Territoire(String name, Lieu lieudebut, List<Lieu> lieuxintermediaires2, List<Lieu> lieuxfin2, List<Chemin> chemins2) {
			this.chemins = chemins2;
			this.lieuDebut = lieudebut;
			this.lieuxintermediaires = lieuxintermediaires2;
			this.lieuxFin = lieuxfin2;
			this.name = name;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public Lieu getLieuDebut() {
			return lieuDebut;
		}
		public void setLieuDebut(Lieu lieuDebut) {
			this.lieuDebut = lieuDebut;
		}
		public List<Lieu> getLieuxintermediaires() {
			return lieuxintermediaires;
		}
		public void setLieuxintermediaires(List<Lieu> lieuxintermediaires) {
			this.lieuxintermediaires = lieuxintermediaires;
		}
		public List<Lieu> getLieuxFin() {
			return lieuxFin;
		}
		public void setLieuxFin(List<Lieu> lieuxFin) {
			this.lieuxFin = lieuxFin;
		}
		public List<Chemin> getChemins() {
			return chemins;
		}
		public void setChemins(List<Chemin> chemins) {
			this.chemins = chemins;
		}
		
		
	}
	
	public class Lieu {
		public String name;
		public List<Personne> personnes;
		public Lieu (String name, List<Personne> personnes) {
			this.name = name;
			this.personnes = personnes;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public List<Personne> getPersonnes() {
			return personnes;
		}
		public void setPersonnes(List<Personne> personnes) {
			this.personnes = personnes;
		}
	}
	
	public class Chemin {
		public EtatChemin etatch;
		public EtatObligation etatob;
		public EtatVisibilite etatvi;
		public Lieu precedent;
		public Lieu suivant;
		public Chemin(EtatChemin etatch, EtatObligation etatob, EtatVisibilite etatvi, Lieu precedent, Lieu suivant) {
			this.etatch = etatch;
			this.etatob = etatob;
			this.etatvi = etatvi;
			this.precedent = precedent;
			this.suivant = suivant;
		}
		public EtatChemin getEtatch() {
			return etatch;
		}
		public void setEtatch(EtatChemin etatch) {
			this.etatch = etatch;
		}
		public EtatObligation getEtatob() {
			return etatob;
		}
		public void setEtatob(EtatObligation etatob) {
			this.etatob = etatob;
		}
		public EtatVisibilite getEtatvi() {
			return etatvi;
		}
		public void setEtatvi(EtatVisibilite etatvi) {
			this.etatvi = etatvi;
		}
		public Lieu getPrecedent() {
			return precedent;
		}
		public void setPrecedent(Lieu precedent) {
			this.precedent = precedent;
		}
		public Lieu getSuivant() {
			return suivant;
		}
		public void setSuivant(Lieu suivant) {
			this.suivant = suivant;
		}
	}
	
	public class Personne {
		public String name;
		public EtatObligation etatob;
		public EtatVisibilite etatvi;
		public Qualification texte;
		public Interaction interaction;
		public Personne(String name, EtatObligation etatob, EtatVisibilite etatvi, Qualification texte, Interaction interaction) {
			this.name = name;
			this.etatob = etatob;
			this.etatvi = etatvi;
			this.texte = texte;
			this.interaction = interaction;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public EtatObligation getEtatob() {
			return etatob;
		}
		public void setEtatob(EtatObligation etatob) {
			this.etatob = etatob;
		}
		public EtatVisibilite getEtatvi() {
			return etatvi;
		}
		public void setEtatvi(EtatVisibilite etatvi) {
			this.etatvi = etatvi;
		}
		public Qualification getTexte() {
			return texte;
		}
		public void setTexte(Qualification texte) {
			this.texte = texte;
		}
		public Interaction getInteraction() {
			return interaction;
		}
		public void setInteraction(Interaction interaction) {
			this.interaction = interaction;
		}
	}
	
	public class Qualification {
		public String qualification;
		public Qualification(String qualification) {
			this.qualification = qualification;
		}
		public String getQualification() {
			return qualification;
		}
		public void setQualification(String qualification) {
			this.qualification = qualification;
		}
	}
	
	public class Interaction {
		public String name;
		public List<Choix> choix;
		public Interaction (String name, List<Choix> choix) {
			this.choix = choix;
			this.name = name;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public List<Choix> getChoix() {
			return choix;
		}
		public void setChoix(List<Choix> choix) {
			this.choix = choix;
		}
	}
	
	public class Choix {
		public String name;
		public List<Reponse> reponses;
		public Choix(String name, List<Reponse> reponses) {
			this.name = name;
			this.reponses = reponses;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public List<Reponse> getReponses() {
			return reponses;
		}
		public void setReponses(List<Reponse> reponses) {
			this.reponses = reponses;
		}
		public ArrayList<String> getNames() {
			ArrayList<String> names = new ArrayList<String>();
			reponses.forEach((n) -> names.add(n.getName()));
			return names;
		}
	}
	
	public class Reponse {
		public String name;
		public Qualification texte;
		public Action action;
		public Reponse(String name, Qualification texte, Action action) {
			this.name = name;
			this.action = action;
			this.texte = texte;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public Qualification getTexte() {
			return texte;
		}
		public void setTexte(Qualification texte) {
			this.texte = texte;
		}
		public Action getAction() {
			return action;
		}
		public void setAction(Action action) {
			this.action = action;
		}
	}
	
	public class Action {
		public String texte;
		public List<Objet> objetsconsommables;
		public List<Objet> objetsattribuables;
		public List<Connaissance> connaissancesattribuables;
		public Action(String texte, List<Objet> oc, List<Objet> oa, List<Connaissance> ca) {
			this.texte = texte;
			this.objetsconsommables = oc;
			this.objetsattribuables = oa;
			this.connaissancesattribuables = ca;
		}
		public String getTexte() {
			return texte;
		}
		public void setTexte(String texte) {
			this.texte = texte;
		}
		public List<Objet> getObjetsconsommables() {
			return objetsconsommables;
		}
		public void setObjetsconsommables(List<Objet> objetsconsommables) {
			this.objetsconsommables = objetsconsommables;
		}
		public List<Objet> getObjetsattribuables() {
			return objetsattribuables;
		}
		public void setObjetsattribuables(List<Objet> objetsattribuables) {
			this.objetsattribuables = objetsattribuables;
		}
		public List<Connaissance> getConnaissancesattribuables() {
			return connaissancesattribuables;
		}
		public void setConnaissancesattribuables(List<Connaissance> connaissancesattribuables) {
			this.connaissancesattribuables = connaissancesattribuables;
		}
	}
	
	private enum EtatVisibilite {
		visible, nonvisible
	}
	
	private enum EtatObligation {
		obligatoire, nonobligatoire
	}
	
	private enum EtatChemin {
		ouvert, ferme
	}
	
	private enum EtatObtention {
		obtenue, nonobtenue
	}
	
}

[/file] 
[/template] 

[query public getTerritoire(j: Jeu) : Territoire =
	j.jeuelement->select(t|t.oclIsTypeOf(Territoire))
				->collect(t|t.oclAsType(Territoire))
 				->asSequence() -> first()
/]

[query public getJoueur(j: Jeu) : Joueur = 
	j.jeuelement->select(j|j.oclIsTypeOf(Joueur))
				->collect(j|j.oclAsType(Joueur))
				->asSequence() -> first()
/]
